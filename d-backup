#!/usr/bin/env bash

##
# Backup script with basic rotation. The script creates a tar gzipped archive
# of directory. The script requires as parameter a configuration file. This file
# must include at least the following parameters : BACKUP_NAME, BACKUP_SOURCE,
# BACKUP_DESTINATION. All parameters are described below in the "Configuration"
# section.
#
# The configuration file is sourced thus it must be a valid bash script file.
#
# It's recommended to run the script daily as cron job. The backup rotation is
# based on file names in the backup destination directory. To keep consistent
# backup rotation don't change the backup days configuration after you started
# the rotations. Don't rename backup files as the date portion of the naming is
# used to delete the rotations. You can manually clean up move/delete backups.
#
# Type 'd-backup --help' for usage information.
##

##
# Configuration
##

# The name of the application or. This value is used in the the backups file name.
BACKUP_NAME=""

# The directory to backup
BACKUP_SOURCE=""

# The base destination to store backups. Sub directories will be created for
# daily, monthly, weekly, yearly and manual backups. This directory must be
# writable by the user running the script.
BACKUP_DESTINATION=""

# Daily backups. The days of the week to perform daily backup. Day of week
# (1..7); 1 is Monday. The accepted value is a single numeric value or valid
# bash array (space delimited numeric values).
#
# Examples:
#  - BACKUP_DAILY="1 3 5" : daily backups on Monday, Wednesday, Friday :
#  - BACKUP_DAILY="1 2 3 4 5 6 7" : daily backup on every day of the week
#  - BACKUP_DAILY="5" : daily backup only on Friday
BACKUP_DAILY="1 2 3 4 5 6 7"

# Weekly backups. Set to 1 to enable weekly backup, 0 to disable.
BACKUP_WEEKLY=1

# On which day of the week to perform weekly backups
# Day of week (1..7); 1 is Monday.
BACKUP_WEEKLY_DAY=4

# How many weekly backups to keep. Example:
#
#  BACKUP_WEEKLY_RETENTION=2 : The last 2 weekly backups will be kept
#  BACKUP_WEEKLY_RETENTION=4 : The last 4 weekly backups will be kept
BACKUP_WEEKLY_RETENTION=4

# Monthly backups.  Set to 1 to enable monthly backups, 0 to disable.
BACKUP_MONTHLY=1

# Day of the month to perform monthly backups. Day of month (1..31), but value
# less than 29 is recommended.
BACKUP_MONTHLY_DAY=15

# How many monthly backups to keep (1..12). Example:
#
#  BACKUP_MONTHLY_RETENTION=1 : Keep only last monthly backup.
#  BACKUP_MONTHLY_RETENTION=12 : Keep all monthly backups.
BACKUP_MONTHLY_RETENTION=12

# Backup yearly. Set to 1 to enable yearly backup, 0 to disable.
BACKUP_YEARLY=1

# Day of the year to perform backup (0..365).
BACKUP_YEARLY_DAY=0

# How many yearly backups to keep. Any numeric value, 0 is special value for
# "infinite" yearly backups.
BACKUP_YEARLY_RETENTION=0

# Default config file to search for.
BACKUP_CONFIG_FILE="dtools.config.sh"

# Script executable, used in help and usage functions.
_SELF=$(basename $0)

##
# Start script.
##

# Usage function used to print errors. First parameter is message to print.
_usage()
{
  echo "$_SELF : $1"
  echo "Try '$_SELF --help' for more information."
}

# Help
_help()
{
  cat << EOF
$_SELF [OPTIONS] [ ACTION [ ACTION_OPTIONS ] ]
Examples:

 Actions:
  manual                    Do a manual backup.

 Options:
  -h, --help                Print this message.
  -c, --config=FILE         Configuration file to read options from. This file
                            must be valid bash script.

EOF
}

# Validate configuration
CONFIG_REQUIRED=("BACKUP_NAME" "BACKUP_SOURCE" "BACKUP_DESTINATION")

# Parse command line options
for _OPTION in "$@"; do
  case $_OPTION in
    -c=*|--config=*)
      BACKUP_CONFIG_FILE="${_OPTION#*=}"
      shift
    ;;
    -h|--help)
        _help
        exit 0
    ;;
  esac
done

# Parse action, actions can add required parameter.
case "$1" in
  manual)
    OPTION_ACTION="manual"
    ;;
esac

# Shift the positional parameter.
shift

# Load configuration
if [[ -n "$BACKUP_CONFIG_FILE" ]]; then
  if [[ -f "$BACKUP_CONFIG_FILE" ]]; then
    source "$BACKUP_CONFIG_FILE"
  else
    echo "Configuration file not found or not readable."
    exit 1
  fi
fi

for _CFG in "${CONFIG_REQUIRED[@]}"; do
  # Use variable variable, check if it's set
  if [ -z "${!_CFG}" ]; then
    _usage "$_CFG parameter is required."
    exit 1
  fi
done

# Check if source directory exists
BACKUP_SOURCE=$(realpath $BACKUP_SOURCE)
if [[ ! -d "$BACKUP_SOURCE" ]]; then
  echo "Source directory $BACKUP_SOURCE not found"
  exit 1
fi

# Check if destination directory is accessible.
if realpath -q $BACKUP_DESTINATION > /dev/null; then
  BACKUP_DESTINATION=$(realpath $BACKUP_DESTINATION)
else
  echo "Backup direcotry path is not accessible please check the permissions."
  exit 1
fi

if [[ -d "$BACKUP_DESTINATION" ]]; then
  # Check if destination directory is writeable
  if [[ ! -w "$BACKUP_DESTINATION" ]]; then
    echo "Backup directory '$BACKUP_DESTINATION' is not writeable."
    exit 1
  fi
else
  # Attempt to create backup destination.
  if ! mkdir -p "$BACKUP_DESTINATION" > /dev/null; then
    echo "Failed to create backup directory '$BACKUP_DESTINATION'."
    exit 1
  fi
fi

# Date Variables
DAY_OF_WEEK=$(date '+%u')
DAY_OF_MONTH=$(date '+%d')
DAY_OF_YEAR=$(date '+%j')

_DO_BACKUP=false

# Manual backup
_DO_BACKUP_MANUAL=false
if [[ $OPTION_ACTION == "manual" ]]; then
  _DO_BACKUP_MANUAL=true
  _DO_BACKUP=true
fi

# Daily backup
_DO_BACKUP_DAILY=false
for _DAY in $BACKUP_DAILY; do
  if [[ "$_DAY" == "$DAY_OF_WEEK" ]]; then
    _DO_BACKUP_DAILY=true
    _DO_BACKUP=true
    break
  fi
done

# Weekly backup
if [[ $BACKUP_WEEKLY -eq 1 && "$BACKUP_WEEKLY_DAY" == "$DAY_OF_WEEK" ]]; then
  _DO_BACKUP_WEEKLY=true
  _DO_BACKUP=true
else
  _DO_BACKUP_WEEKLY=false
fi

# Monthly backup
if [[ $BACKUP_MONTHLY -eq 1 && "$BACKUP_MONTHLY_DAY" == "$DAY_OF_MONTH" ]]; then
  _DO_BACKUP_MONTHLY=true
  _DO_BACKUP=true
else
  _DO_BACKUP_MONTHLY=false
fi

# Yearly backup
if [[ $BACKUP_YEARLY -eq 1 && "$BACKUP_YEARLY_DAY" == "$DAY_OF_YEAR" ]]; then
  _DO_BACKUP_YEARLY=true
  _DO_BACKUP=true
else
  _DO_BACKUP_YEARLY=false
fi

BACKUP_FILENAME="$(date '+%Y%m%d')-$BACKUP_NAME.tar.gz"
BACKUP_ARCHIVE="$BACKUP_DESTINATION/$BACKUP_FILENAME"

if [[ $_DO_BACKUP == true ]]; then
  # Create archive relative from source directory
  tar cpzf "$BACKUP_ARCHIVE" -C $(dirname "$BACKUP_SOURCE") $(basename "$BACKUP_SOURCE")
fi

if [[ $_DO_BACKUP_MANUAL == true ]]; then
  # Daily backup destination
  BACKUP_DESTINATION_MANUAL="$BACKUP_DESTINATION/manual"

  mkdir -p "$BACKUP_DESTINATION_MANUAL"
  mv "$BACKUP_ARCHIVE" "$BACKUP_DESTINATION_MANUAL"

  # On manual we don't run scheduled backups so we exit here.
  exit 0
fi

if [[ $_DO_BACKUP_DAILY == true ]]; then
  # Daily backup destination
  BACKUP_DESTINATION_DAILY="$BACKUP_DESTINATION/daily"

  mkdir -p "$BACKUP_DESTINATION_DAILY"
  cp "$BACKUP_ARCHIVE" "$BACKUP_DESTINATION_DAILY"

  # Daily backup rotation.
  BACKUP_DAILY_ROTATE_FILENAME="$(date '+%Y%m%d' -d '-1 week')-$BACKUP_NAME.tar.gz"
  if [[ -f "$BACKUP_DESTINATION_DAILY/$BACKUP_DAILY_ROTATE_FILENAME" ]]; then
    rm "$BACKUP_DESTINATION_DAILY/$BACKUP_DAILY_ROTATE_FILENAME"
  fi
fi

if [[ $_DO_BACKUP_WEEKLY == true ]]; then
  # Weekly backup destination
  BACKUP_DESTINATION_WEEKLY="$BACKUP_DESTINATION/weekly"

  mkdir -p "$BACKUP_DESTINATION_WEEKLY"
  cp "$BACKUP_ARCHIVE" "$BACKUP_DESTINATION_WEEKLY"

  # Weekly backup rotation.
  BACKUP_WEEKLY_ROTATE_FILENAME="$(date '+%Y%m%d' -d '-'$BACKUP_WEEKLY_RETENTION' week')-$BACKUP_NAME.tar.gz"
  if [[ -f "$BACKUP_DESTINATION_WEEKLY/$BACKUP_WEEKLY_ROTATE_FILENAME" ]]; then
    rm "$BACKUP_DESTINATION_WEEKLY/$BACKUP_WEEKLY_ROTATE_FILENAME"
  fi
fi

if [[ $_DO_BACKUP_MONTHLY == true ]]; then
  # Monthly backup destination
  BACKUP_DESTINATION_MONTHLY="$BACKUP_DESTINATION/monthly"

  mkdir -p "$BACKUP_DESTINATION_MONTHLY"
  cp "$BACKUP_ARCHIVE" "$BACKUP_DESTINATION_MONTHLY"

  # Monthly backup rotation.
  BACKUP_MONTHLY_ROTATE_FILENAME="$(date '+%Y%m%d' -d '-'$BACKUP_MONTHLY_RETENTION' month')-$BACKUP_NAME.tar.gz"
  BACKUP_MONTHLY_ROTATE_FILE=$BACKUP_DESTINATION_MONTHLY/$BACKUP_MONTHLY_ROTATE_FILENAME
  if [[ -f "$BACKUP_MONTHLY_ROTATE_FILE" ]]; then
    rm "$BACKUP_MONTHLY_ROTATE_FILE"
  fi
fi

if [[ $_DO_BACKUP_YEARLY == true ]]; then
  # Yearly backup destination
  BACKUP_DESTINATION_YEARLY="$BACKUP_DESTINATION/yearly"

  mkdir -p "$BACKUP_DESTINATION_YEARLY"
  cp "$BACKUP_ARCHIVE" "$BACKUP_DESTINATION_YEARLY"

  BACKUP_YEARLY_ROTATE_FILENAME="$(date '+%Y%m%d' -d '-'$BACKUP_YEARLY_RETENTION' year')-$BACKUP_NAME.tar.gz"
  BACKUP_YEARLY_ROTATE_FILE=$BACKUP_DESTINATION_YEARLY/$BACKUP_YEARLY_ROTATE_FILENAME
  if [[ -f "$BACKUP_YEARLY_ROTATE_FILE" ]]; then
    rm "$BACKUP_YEARLY_ROTATE_FILE"
  fi
fi

# Clean up
if [[ $_DO_BACKUP == true ]]; then
  rm "$BACKUP_ARCHIVE"
fi
